# This Python file uses the following encoding: utf-8
import sys
from PySide6.QtCore import (Qt, QEvent, QObject, Signal, Slot)
from PySide6.QtWidgets import (QApplication, QLabel, QMainWindow, QPushButton, QVBoxLayout, QWidget, QFileDialog, QProgressBar, QHBoxLayout)
import joblib
import os
import pefile
import numpy as np

class Widget(QWidget):

    def load_model(self):
        self.model = joblib.load('modelone.pkl')

    def make_prediction(self, file_path):
        features = self.extract_features(file_path)
        if features is not None:
            features = np.array(features).reshape(1,-1)
            prediction = self.model.predict(features)
            return prediction

    @staticmethod
    def extract_features(file_path):
        features = []
        try:
            pe = pefile.PE(file_path)

            total_vm = 0
            shared_vm = 0
            exec_vm = 0
            reserved_vm = 0
            end_data = 0
            num_sections = 0

            num_shared_pages = 0

            for section in pe.sections:
                if section.Characteristics & 0x80000000:
                    num_shared_pages += 1

            for section in pe.sections:
                if section.Characteristics & pefile.SECTION_CHARACTERISTICS['IMAGE_SCN_MEM_EXECUTE']:
                    exec_vm += 1
                total_vm += section.Misc_VirtualSize
                num_sections += 1

            size_of_code = pe.OPTIONAL_HEADER.SizeOfCode
            image_base = pe.OPTIONAL_HEADER.ImageBase
            base_of_code = pe.OPTIONAL_HEADER.BaseOfCode

            end_data = image_base + base_of_code + size_of_code

            reserved_vm = pe.OPTIONAL_HEADER.SizeOfUninitializedData

            total_vm = total_vm // num_sections

            #total_vm
            features.append(total_vm)
            #shared_vm
            features.append(shared_vm)
            #exec_vm
            features.append(exec_vm)
            #reserved_vm
            features.append(reserved_vm)
            #end_data
            features.append(end_data)

        except Exception as e:
            print(f"Error: {e}")
            return None
        print("Extracted features:", features)
        return features

    def __init__(self, parent=None):
        super().__init__(parent)
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.progressBar = QProgressBar(self)
        self.progressBar.setRange(0, 0)  # Makes it a busy indicator
        self.progressBar.hide()

        empty_left_label = QLabel("     ")

        btn = QPushButton('Find File', self)
        btn.setFixedSize(150, 50)
        btn.clicked.connect(self.showDialog)
        self.text = QLabel("No file selected")

        hbox = QHBoxLayout()
        hbox.addWidget(empty_left_label)
        hbox.addWidget(btn)
        hbox.addWidget(self.text)
        hbox.addStretch()

        layout.addStretch()
        layout.addLayout(hbox)
        layout.addWidget(self.progressBar, alignment=Qt.AlignmentFlag.AlignCenter)
        layout.addStretch()

        self.setLayout(layout)
        self.setWindowTitle('File Input')
        self.setFixedSize(800, 600)
        self.show()

    def showDialog(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file', './')
        if fname[0]: #if it exists
            self.progressBar.show()
            temp = str(fname[0])
            curr = ""
            for i in range(len(temp)):
                if temp[len(temp)-1-i] == '/':
                    break
                else:
                    curr += temp[len(temp)-1-i]
            self.text.setText("Scanning File: " + curr[::-1])
            self.load_model()

            prediction = self.make_prediction(temp)

            if prediction[0] == 1:
                self.text.setText(f"The file is malicious")
            else:
                self.text.setText(f"The file is safe")

            self.progressBar.hide()


if __name__ == "__main__":
    app = QApplication([])
    window = Widget()
    window.show()
    sys.exit(app.exec())
